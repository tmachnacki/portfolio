---
import OrbitingCircles from "@/components/home/orbiting-circles";
import React from "@/components/icons/tech/react.astro";
import Tailwind from "@/components/icons/tech/tailwind.astro";
import Shadcn from "@/components/icons/tech/shadcn.astro";
import Next from "@/components/icons/tech/next.astro";
import Typescript from "@/components/icons/tech/typescript.astro";
import AstroIcon from "@/components/icons/tech/astro-icon.astro";
import Node from "@/components/icons/tech/node.astro";

const pathClassName = "stroke-primary/20 z-10 animate-pulse";
const circleClassName =
  "bg-gradient-to-br to-black via-zinc-950 bg-background z-20";
---

<div
  class="relative z-20 flex h-[360px] w-full flex-col items-center justify-center overflow-visible bg-transparent"
>
  {/* Inner Circles */}
  <OrbitingCircles
    className={`circle-inner size-11 from-zinc-400 ${circleClassName}`}
    duration={20}
    radius={60}
    delay={7}
    angle={120}
    pathClassName={pathClassName}
    tooltipLabel="shadcn/ui"
    tooltipGradientClassName="via-zinc-400 shadow-md shadow-zinc-400/50"
    client:load
  >
    <Shadcn class="size-4" />
  </OrbitingCircles>

  <OrbitingCircles
    className={`circle-inner size-11 from-cyan-600 ${circleClassName}`}
    duration={20}
    delay={14}
    radius={60}
    angle={240}
    pathClassName={pathClassName}
    tooltipLabel="React"
    tooltipGradientClassName="via-cyan-600 shadow-md shadow-cyan-600/50"
    client:load
  >
    <React class="size-5" />
  </OrbitingCircles>

  <OrbitingCircles
    className={`circle-inner size-11 from-sky-500 ${circleClassName}`}
    duration={20}
    delay={21}
    radius={60}
    angle={360}
    pathClassName={pathClassName}
    tooltipLabel="TailwindCSS"
    tooltipGradientClassName="via-sky-500 shadow-md shadow-sky-500/50"
    client:load
  >
    <Tailwind class="size-5" />
  </OrbitingCircles>

  {/* Outer Circles (reverse) */}
  <OrbitingCircles
    className={`circle-outer size-11 from-blue-500 ${circleClassName}`}
    radius={140}
    duration={20}
    delay={5}
    reverse
    pathClassName={pathClassName}
    tooltipLabel="Typescript"
    tooltipGradientClassName="via-blue-500 shadow-md shadow-blue-500/50"
    client:load
  >
    <Typescript class="size-5" />
  </OrbitingCircles>

  <OrbitingCircles
    className={`circle-outer size-11 from-zinc-400 ${circleClassName}`}
    radius={140}
    duration={20}
    delay={10}
    reverse
    pathClassName={pathClassName}
    tooltipLabel="NextJS"
    tooltipGradientClassName="via-white shadow-md shadow-white/50"
    client:load
  >
    <Next class="size-5" />
  </OrbitingCircles>

  <OrbitingCircles
    className={`circle-outer size-11 from-fuchsia-500 ${circleClassName}`}
    radius={140}
    duration={20}
    delay={15}
    reverse
    pathClassName={pathClassName}
    tooltipLabel="Astro"
    tooltipGradientClassName="via-fuchsia-500 shadow-md shadow-fuchsia-500/50"
    client:load
  >
    <AstroIcon class="size-5" />
  </OrbitingCircles>

  <OrbitingCircles
    className={`circle-outer size-11 from-lime-500 ${circleClassName}`}
    radius={140}
    duration={20}
    delay={20}
    reverse
    pathClassName={pathClassName}
    tooltipLabel="NodeJS"
    tooltipGradientClassName="via-lime-500 shadow-md shadow-lime-500/50"
    client:load
  >
    <Node class="size-5" />
  </OrbitingCircles>
</div>

<script is:inline>
  // pause orbit animations on hover
  const innerCircles = document.querySelectorAll(".circle-inner");
  innerCircles.forEach((circle) => {
    circle.addEventListener("mouseenter", () => {
      innerCircles.forEach((circle) => {
        circle.classList.add("paused");
      });
    });
    circle.addEventListener("mouseleave", () => {
      innerCircles.forEach((circle) => {
        circle.classList.remove("paused");
      });
    });
  });

  const outerCircles = document.querySelectorAll(".circle-outer");
  outerCircles.forEach((circle) => {
    circle.addEventListener("mouseenter", () => {
      outerCircles.forEach((circle) => {
        circle.classList.add("paused");
      });
    });
    circle.addEventListener("mouseleave", () => {
      outerCircles.forEach((circle) => {
        circle.classList.remove("paused");
      });
    });
  });
</script>
