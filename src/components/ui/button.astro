---
import { cn } from "@/lib/utils";
import { cva, type VariantProps } from "class-variance-authority";
import type { HTMLTag, Polymorphic } from "astro/types";

export const buttonVariants = cva(
  "cursor-pointer inline-flex items-center justify-center whitespace-nowrap text-sm font-medium transition duration-100 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 motion-reduce:transition-none",
  {
    variants: {
      variant: {
        default: "bg-foreground text-background hover:bg-foreground/90",
        destructive:
          "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline:
          "border border-input bg-background/10 backdrop-blur-sm hover:bg-gradient-to-t hover:from-accent hover:to-transparent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-10 px-4 py-2 rounded-md",
        sm: "h-9 rounded px-3",
        lg: "h-11 rounded-md px-8",
        icon: "h-10 w-10 rounded-md",
        iconSm: "h-9 w-9 rounded",
        iconXs: "h-8 w-8 rounded",
        iconLg: "h-11 w-11 rounded-md",
      },
      gradient: {
        default: "",
        primary:
          "relative group/button backdrop-blur-sm hover:bg-gradient-to-b hover:from-primary/10 hover:to-primary/0 hover:bg-transparent border border-border hover:border-primary/30",
        zinc: "relative group/button backdrop-blur-sm hover:bg-gradient-to-b hover:from-zinc-400/10 hover:to-zinc-400/0 hover:bg-transparent border border-border hover:border-zinc-400/30",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
      gradient: "default",
    },
  },
);

type Props<Tag extends HTMLTag> = Polymorphic<{ as: Tag }> &
  VariantProps<typeof buttonVariants>;

const {
  variant,
  size,
  gradient,
  as: Tag = "button",
  class: className,
  ...props
} = Astro.props;
---

<Tag
  class={cn(buttonVariants({ variant, size, gradient }), className)}
  {...props}
>
  {
    gradient && (
      <span
        class={cn(
          "absolute -top-px left-[20%] h-px w-[60%] bg-gradient-to-r opacity-0 transition-opacity duration-300 group-hover/button:opacity-100 motion-reduce:transition-none",
          gradient === "primary"
            ? "from-primary/10 via-primary to-primary/10"
            : "from-zinc-400/10 via-zinc-400 to-zinc-400/0",
        )}
      />
    )
  }

  <slot />

  {
    gradient && (
      <span
        class={cn(
          "absolute -bottom-px left-[20%] h-px w-[60%] bg-gradient-to-r opacity-100 transition-opacity duration-300 group-hover/button:opacity-0 motion-reduce:transition-none",
          gradient === "primary"
            ? "from-primary/10 via-primary to-primary/10"
            : "from-zinc-400/10 via-zinc-400 to-zinc-400/0",
        )}
      />
    )
  }
</Tag>
