---
import { cn } from "@/lib/utils";
import { cva, type VariantProps } from "class-variance-authority";
import type { HTMLAttributes } from "astro/types";

export const buttonVariants = cva(
  "cursor-pointer inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline:
          "border border-input bg-background/10 backdrop-blur-sm hover:bg-gradient-to-t hover:from-accent hover:to-transparent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        icon: "h-10 w-10",
        iconSm: "h-9 w-9",
        iconXs: "h-8 w-8",
        iconLg: "h-11 w-11",
      },
      gradient: {
        default: "",
        full: "relative group/button bg-background/10 backdrop-blur-sm hover:bg-gradient-to-b hover:from-primary/10 hover:to-primary/0 hover:bg-transparent transition duration-300 border border-border hover:border-primary/30",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
      gradient: "default",
    },
  },
);

interface Props
  extends HTMLAttributes<"button">,
    VariantProps<typeof buttonVariants> {}
const {
  variant,
  size,
  gradient,

  class: className,
  ...props
} = Astro.props;
---

<button
  class={cn(buttonVariants({ variant, size, gradient, className }))}
  {...props}
>
  {
    gradient === "full" && (
      <span class="absolute -top-px left-[20%] h-px w-[60%] bg-gradient-to-r from-indigo-500/10 via-indigo-500 to-indigo-500/10 opacity-0 transition-opacity duration-300 group-hover/button:opacity-100" />
    )
  }

  <slot />

  {
    gradient === "full" && (
      <span class="absolute -bottom-px left-[20%] h-px w-[60%] bg-gradient-to-r from-indigo-500/10 via-indigo-500 to-indigo-500/10 transition-opacity duration-300 group-hover/button:opacity-0" />
    )
  }
</button>
