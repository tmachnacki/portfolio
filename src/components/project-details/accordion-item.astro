---
import { cn } from "@/lib/utils";

interface Props {
  id: string;
  triggerId: string;
  contentId: string;
  itemClassName?: string;
  triggerClassName?: string;
  contentClassName?: string;
}
const {
  id,
  contentId,
  triggerId,
  itemClassName,
  triggerClassName,
  contentClassName,
} = Astro.props;
---

<div
  class={cn("relative border-b", itemClassName)}
  data-state="closed"
  id={id}
  data-component="accordion-item"
>
  <h3 data-state="closed" class="flex">
    <button
      id={triggerId}
      aria-controls={contentId}
      aria-expanded="false"
      data-state="closed"
      class={cn(
        "relative flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180",
        triggerClassName,
      )}
      type="button"
    >
      <slot name="trigger" />
      <svg
        xmlns="http://www.w3.org/2000/svg"
        width="24"
        height="24"
        viewBox="0 0 24 24"
        fill="none"
        stroke="currentColor"
        stroke-width="2"
        stroke-linecap="round"
        stroke-linejoin="round"
        class="size-4 shrink-0 transition-transform duration-200"
      >
        <path d="m6 9 6 6 6-6"></path>
      </svg>
    </button>
  </h3>

  <div
    id={contentId}
    data-state="closed"
    role="region"
    aria-labelledby={triggerId}
    class="accordion-content relative max-h-0 overflow-hidden text-sm transition-all"
  >
    <div class={cn("pb-4 pt-0", contentClassName)}>
      <slot name="content" />
    </div>
  </div>
</div>

<script>
  let accordionItem = document.querySelector(
    "[data-component=accordion-item]",
  )!;

  accordionItem.addEventListener("click", () => {
    if (accordionItem.getAttribute("data-state") === "open") {
      // set all data-state to closed
      accordionItem.setAttribute("data-state", "closed");
      accordionItem.querySelectorAll("[data-state=open]").forEach((el) => {
        el.setAttribute("data-state", "closed");
        if (el.getAttribute("aria-expanded") === "true") {
          el.setAttribute("aria-expanded", "false");
        }
        if (el.classList.contains("accordion-content")) {
          el.setAttribute("style", "max-height: 0;");
        }
      });
    } else {
      // set all data-state to open
      accordionItem.setAttribute("data-state", "open");
      accordionItem.querySelectorAll("[data-state=closed]").forEach((el) => {
        el.setAttribute("data-state", "open");
        if (el.getAttribute("aria-expanded") === "false") {
          el.setAttribute("aria-expanded", "true");
        }
        if (el.classList.contains("accordion-content")) {
          el.setAttribute("style", `max-height: ${el.scrollHeight}px;`);
        }
      });
    }
  });
</script>
